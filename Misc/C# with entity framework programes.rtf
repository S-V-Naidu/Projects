{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset2 Symbol;}}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl240\slmult1\b\f0\fs22\lang9 Stage 1 knockout challenge:-\b0\par

\pard\sl240\slmult1 //Driver.cs=>\par
//using ADO.NET framework\par
using System;\par
using System.Collections.Generic;\par
using System.Linq;\par
using System.Text;\par
using System.Threading.Tasks;\par
\par
namespace MetalappsAutomation     //DO NOT change the namespace name\par
\{\par
    public class Program          //DO NOT change the class name\par
    \{\par
        static void Main(string[] args)         //DO NOT change the 'Main' method signature\par
        \{\par
            SalesDetails S = new SalesDetails();\par
            Console.WriteLine("Enter sales id");\par
            S.SalesId=Convert.ToInt32(Console.ReadLine());\par
            Console.WriteLine("Enter customer Name");\par
            S.CustomerName =(Console.ReadLine());\par
            Console.WriteLine("Enter the number of units");\par
            try\{\par
                S.NoOfUnits = Convert.ToInt32(Console.ReadLine());\par
            \}\par
            catch(ArgumentOutOfRangeException outOfRange)\par
            \{\par
                Console.WriteLine("Error: \{0\}",outOfRange.Message);\par
            \}\par
            \par
            Metalapps M = new Metalapps();\par
            M.CalculateNetAmount(S);\par
            M.AddSalesDetails(S);\par
            Console.WriteLine("Sales Bill");\par
            Console.WriteLine("***********");\par
            Console.WriteLine("Sales Id : "+S.SalesId);\par
            Console.WriteLine("Customer Name : "+S.CustomerName);\par
            Console.WriteLine("Number of Units Sold : "+S.NoOfUnits);\par
            Console.WriteLine("Net Amount : "+S.NetAmount);\par
        \}\par
    \}\par
\par
\}\par
\par
\par
//SalesDetails.cs=>\par
\par
using System;\par
using System.Collections.Generic;\par
using System.Linq;\par
using System.Text;\par
using System.Threading.Tasks;\par
\par
namespace MetalappsAutomation    //DO NOT change the namespace name\par
\{\par
\tab public class SalesDetails   //DO NOT change the class name\par
    \{\par
        private int salesId;\par
        private string customerName;\par
        private int noOfUnits;\par
        private double netAmount=0;\par
        \par
        public int SalesId\{\par
            get\{return salesId;\}\par
            set\{salesId = value;\}\par
        \}\par
        public string CustomerName\{\par
            get\{return customerName;\}\par
            set\{customerName = value;\}\par
        \}\par
        public int NoOfUnits\{\par
            get\{\par
                return noOfUnits;\par
            \}\par
            set\{\par
                if (value<=5)\par
                    throw new ArgumentOutOfRangeException("noOfUnits","No Sales for units below 5");\par
                else\par
                    noOfUnits=value;\par
            \}\par
\par
        \}\par
        public double NetAmount\{\par
            get\{return netAmount;\}\par
            set\{netAmount = value;\}\par
        \}\par
        public SalesDetails()\{\par
            //this.salesId = s;\par
            //this.customerName = c;\par
            //this.noOfUnits = n;\par
            //this.netAmount = 0;\par
        \}\par
    \}\par
\}\tab  \tab   \tab  \tab  \tab    \tab   \tab     \tab  \tab\par
\par
\par
//DBHandler.cs=>\par
\par
using System;\par
using System.Configuration;\par
using System.Data.SqlClient;\par
\par
namespace MetalappsAutomation  //DO NOT change the namespace name\par
\{\par
    class DBHandler  //DO NOT change the class name\par
    \{\par
        public SqlConnection GetConnection()\{\par
            \par
            var connectionString=ConfigurationManager.ConnectionStrings["SqlCon"].ConnectionString;\par
            SqlConnection connection = new SqlConnection(connectionString); \par
            //connection.Open();  \par
            return connection;\par
        \}    \par
    \}\par
\}\par
\par
\par
//Metalapps.cs=>\par
\par
using System;\par
using System.Collections.Generic;\par
using System.Data;\par
using System.Drawing;\par
using System.Data.SqlClient;\par
\par
using System.Linq;\par
using System.Text;\par
using System.Threading.Tasks;\par
\par
namespace MetalappsAutomation //DO NOT change the namespace name\par
\{\par
\tab public  class Metalapps            //DO NOT change the class name\par
\tab\{\par
\tab\tab public SqlConnection SqlCon\{get; set;\}\par
\tab\tab\tab\par
\tab\tab public void AddSalesDetails(SalesDetails sd)\{\par
\tab         DBHandler D = new DBHandler();\par
\tab\tab\tab SqlCon = D.GetConnection();\par
\tab\tab\tab string query = "INSERT INTO SalesDetails(Sales_id,Customer_name,Noof_units,Net_amount) VALUES(@Sales_id,@Customer_name,@Noof_units,@Net_amount)";\par
SqlCon.Open();\par
\tab\tab\tab SqlCommand cmd = new SqlCommand(query, SqlCon);\par
            //cmd.CommandType = CommandType.StoredProcedure;\par
            cmd.Parameters.Add("@Sales_id", sd.SalesId);\par
            cmd.Parameters.Add("@Customer_name", sd.CustomerName);\par
            cmd.Parameters.Add("@Noof_units", sd.NoOfUnits);\par
            cmd.Parameters.Add("@Net_amount", sd.NetAmount);\par
            cmd.ExecuteNonQuery();\par
            SqlCon.Close();\par
\tab\tab     \}\par
\tab\tab public void CalculateNetAmount(SalesDetails details)\{\par
\tab\tab     int n = details.NoOfUnits;\par
\tab\tab     details.NetAmount = 75350 * details.NoOfUnits;\par
\tab\tab     if(n>5 && n<=10)\{\par
\tab\tab\tab     details.NetAmount = details.NetAmount - (details.NetAmount*0.02);\par
\tab\tab\tab\}\par
\tab\tab\tab else if(n>10 && n<=15)\{\par
\tab\tab\tab     details.NetAmount = details.NetAmount - (details.NetAmount*0.05);\par
\tab\tab\tab\}\par
\tab\tab\tab else if(n>15 && n<=20)\{\par
\tab\tab\tab     details.NetAmount = details.NetAmount - (details.NetAmount*0.08);\par
\tab\tab\tab\}\par
\tab\tab\tab else if(n>20)\{\par
\tab\tab\tab     details.NetAmount = details.NetAmount - (details.NetAmount*0.1);\par
\tab\tab\tab\}\par
\tab\tab\}\par
\tab\}\par
\}\par
\par
\par
App.config=>\par
\par
<?xml version="1.0" encoding="utf-8" ?>\par
<configuration>\par
    <startup> \par
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.6.1" />\par
    </startup>\par
  <connectionStrings>\par
    <add name="SqlCon" connectionString="server=localhost;database=SalesDatabase;uid=XXXXX;password=XXXXXX;"/>\par
  </connectionStrings>\par
</configuration>\par
\par
All these using Entity Framework\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl240\slmult1\b Adding Students details into Database(Stage 2 Entity Framework)(1st Hands on):-\b0\par

\pard\sl240\slmult1\par
//Program.cs\par
using System;\par
using System.Collections.Generic;\par
using System.Linq;\par
using System.Text;\par
using System.Threading.Tasks;\par
using System.Data.SqlClient;\par
using System.Data.Entity;\par
\par
namespace StudentManagement               //DO NOT Change the namespace name\par
\{\par
    public class Program              //DO NOT Change the class name\par
    \{\par
        public static void Main(string[] args)\par
        \{\par
            Program P = new Program();\par
            Student s = new Student();\par
            Console.WriteLine("Enter Student Id");\par
            s.StudentId = Convert.ToInt32(Console.ReadLine());\par
            Console.WriteLine("Enter Student Name");\par
            s.StudentName = Console.ReadLine();\par
            Console.WriteLine("Enter Department");\par
            s.Department = Console.ReadLine();\par
            Console.WriteLine("Enter Enrollment Date");\par
            string eD = Console.ReadLine();\par
            string[] d = eD.Split('-');\par
            string ed = d[2]+"/"+d[1]+"/"+d[0];\par
            s.EnrolledDate = Convert.ToDateTime(ed);\par
            Console.WriteLine("Enter PhoneNumber");\par
            s.PhoneNumber = long.Parse(Console.ReadLine());\par
            P.AddStudent(s);\par
            Console.WriteLine("Details Added Successfully");\par
            \par
        \}\par
        \par
        public void AddStudent(Student student)\{       //Do not change the method signature\par
            var context = new CollegeContext();\par
            var students = new Student\par
            \{\par
                StudentId=student.StudentId,\par
                StudentName=student.StudentName,\par
                EnrolledDate=student.EnrolledDate,\par
                Department=student.Department,\par
                PhoneNumber=student.PhoneNumber\par
            \};\par
            context.Students.Add(students);\par
            context.SaveChanges();\par
        \}\par
    \}\par
\}\par
\par
//Student.cs=>\par
using System;\par
using System.Collections.Generic;\par
using System.Linq;\par
using System.Text;\par
using System.Threading.Tasks;\par
\par
namespace StudentManagement   //DO NOT Change the namespace name\par
\{\par
    public class Student     //DO NOT Change the class name\par
    \{\par
        public int StudentId\{get; set;\}\par
        public string StudentName\{get; set;\}\par
        public DateTime EnrolledDate\{get; set;\}\par
        public string Department\{get; set;\}\par
        public long PhoneNumber\{get; set;\}\par
    \}\par
\}\par
\par
using System;\par
using System.Collections.Generic;\par
using System.Linq;\par
using System.Text;\par
using System.Threading.Tasks;\par
using System.Data.Entity;\par
\par
namespace StudentManagement      //DO NOT Change the namespace name\par
\{\par
    public class CollegeContext: DbContext      //DO NOT Change the class name\par
    \{\par
        //DO NOT Change the Context name 'StudentConnectionString'\par
        public CollegeContext() : base("name=StudentConnectionString")\{\}\par
        \par
        //Declare 'Students' Property of type Dbset with neccessary declaration code.\par
        public DbSet<Student> Students\{get; set;\}\par
       \par
\par
    \}\par
\}\par
\par
\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl240\slmult1\b Book details into Database using Fluent API(Stage 2 Entity Framework)(2nd Hands on):-\par

\pard\sl240\slmult1\b0\par
//Book.cs=>\par
using System;\par
using System.Collections.Generic;\par
using System.Linq;\par
using System.Text;\par
using System.Threading.Tasks;\par
\par
namespace Exercise1           //DO NOT Change the namespace name \par
\{\par
   public class Book //DO NOT Change the class name\par
    \{\par
       public int BookId \{ get; set; \}\par
        public String BookName \{ get; set; \}\par
        public String BookAuthor \{ get; set; \}\par
        public String BookGenre \{ get; set; \}\par
        public double BookPrice \{ get; set; \}\par
\par
    \}\par
\}\par
\par
//BookUtil.cs=>\par
using System;\par
using System.Collections.Generic;\par
using System.Linq;\par
using System.Text;\par
using System.Threading.Tasks;\par
using System.Data.Entity;\par
using System.Data.SqlClient;\par
\par
namespace Exercise1              //DO NOT change the namespace name\par
\{\par
    public class BookUtil         //DO NOT change the class name \par
    \{\par
         \par
        public Book AddBook(Book book)    //DO NOT change the method Name and Signature\par
        \{\par
            var context = new LibraryContext();\par
            var books = new Book\par
            \{\par
                BookId=book.BookId,\par
                BookName=book.BookName,\par
                BookAuthor=book.BookAuthor,\par
                BookGenre=book.BookGenre,\par
                BookPrice=book.BookPrice\par
            \};\par
            context.Books.Add(books);\par
            context.SaveChanges();\par
            Console.WriteLine("Details Added Successfully");\par
            return books;\par
        \}\par
\par
\par
        public List<Book> GetBookByGenre(String Genre)   //DO NOT change the method Name and Signature\par
        \{\par
            //Implement code to get the book entity from database based on Genre\par
            var context = new LibraryContext();\par
            var genres = context.Books.ToList();\par
            var genre = from g in genres where g.BookGenre==Genre select g;\par
            //var genre = context.Books.Single(a => a.BookGenre== Genre);\par
            //List<Book> G = new List<Book>\{\par
            //    new Book()\{BookId=genre.BookId,BookName=genre.BookName,BookAuthor=genre.BookAuthor,BookGenre=genre.BookGenre,BookPrice=genre.BookPrice,\}\par
            //\};\par
            List<Book> G = genre.ToList();\par
            return G;\par
        \}\par
        public List<Book> GetBooksList() //DO NOT change the method Name and Signature\par
        \{\par
             //Implement code to get the book list from database\par
            var context = new LibraryContext();\par
            var lis = context.Books.ToList();\par
            //List<Book> b = new List<Book>();\par
            \par
            return lis;\par
        \}\par
        public Book UpdateBookPrice(int NewPrice,int Bookid)   //DO NOT change the method Name and Signature\par
        \{\par
             //Implement code to update the book entity \par
            var context = new LibraryContext();\par
            var book = context.Books.Find(Bookid);\par
            book.BookPrice = NewPrice;\par
            context.SaveChanges();\par
            return book;\par
        \}\par
\par
        public Book DeleteBook(int BookId)  //DO NOT change the method Name and Signature\par
        \{\par
            //Implement code to delete the book entity by Id\par
            var context = new LibraryContext();\par
            try\{\par
            var book = context.Books.Single(c => c.BookId==BookId);\par
            //var temp = book;\par
            context.Books.Remove(book);\par
            context.SaveChanges();\par
            return book;\par
            \}\par
            catch(Exception e)\{\par
                Console.WriteLine("Error");\par
                Book h = new Book();\par
                return h;\par
            \}\par
            //SqlConnection connection = new SqlConnection("xxxxxx xxxxxx xxxxx xxxxxx xxxxxx");\par
            //string sqlStatement = "DELETE FROM BookDetail WHERE Book_ID = @BookID";\par
            //string sqlStatement0 = "SELECT * FROM BookDetail WHERE Book_ID = @BookID";\par
            //Book book = new Book();\par
            //try\{\par
            //    connection.Open();\par
            //    SqlCommand cmd = new SqlCommand(sqlStatement, connection);\par
            //    cmd.Parameters.AddWithValue("@BookID", BookId);\par
            //    //cmd.CommandType = CommandType.Text;\par
            //    cmd.ExecuteNonQuery();\par
            //\}\par
            //finally \{\par
            //    connection.Close();\par
            //\}\par
        \}\par
\par
    \}\par
\}\par
\par
//LibraryContext.cs=>\par
using System;\par
using System.Collections.Generic;\par
using System.Linq;\par
using System.Text;\par
using System.Threading.Tasks;\par
using System.Data.Entity;\par
\par
namespace Exercise1                      //DO NOT change the namespace name\par
\{\par
    public class LibraryContext:DbContext        //DO NOT change the class name\par
    \{\par
\par
        //DO NOT change the context name\par
        public LibraryContext() : base("name=BookStore")\{\}\par
       \par
        public DbSet<Book> Books\{get; set;\}       \par
        //Implement Books of type DbSet\par
        protected override void OnModelCreating(DbModelBuilder modelBuilder)\par
        \{\par
            //Implement code to make 'Book_id' required in entity 'Book' and table name as mentioned in description \par
            modelBuilder.Entity<Book>().ToTable("BookDetail");\par
            modelBuilder.Entity<Book>().HasKey(t => t.BookId);\par
            modelBuilder.Entity<Book>().Property(t => t.BookId).HasColumnName("Book_Id");\par
        \}\par
    \}\par
\}\par
\par
//Program.cs=>\par
using System;\par
using System.Collections.Generic;\par
using System.Linq;\par
using System.Text;\par
using System.Threading.Tasks;\par
\par
namespace Exercise1   //DO NOT change the namespace name\par
\{\par
    public class Program   //DO NOT change the class name\par
    \{\par
        static void Main(string[] args)      //DO NOT change the 'Main' method signature\par
        \{\par
            Book B = new Book();\par
            BookUtil bU = new BookUtil();\par
            int i=1;\par
            up: B.BookId = i++;\par
            Console.WriteLine("Enter Book Name");\par
            B.BookName = Console.ReadLine();\par
            Console.WriteLine("Enter Book Author");\par
            B.BookAuthor = Console.ReadLine();\par
            Console.WriteLine("Enter Book Genre");\par
            B.BookGenre = Console.ReadLine();\par
            Console.WriteLine("Enter Book Price");\par
            B.BookPrice = double.Parse(Console.ReadLine());\par
            B = bU.AddBook(B);\par
            //if(i<=2)\par
            //    goto up;\par
            Console.WriteLine("");\par
            \par
            Console.WriteLine("Get Book Details By Genre");\par
            string g = Console.ReadLine();\par
            List<Book> b = new List<Book>();\par
            b = bU.GetBookByGenre(g);\par
            for(int j=0;j<b.Count;j++)\par
                Console.WriteLine(b[j].BookName+"--"+b[j].BookAuthor);\par
            Console.WriteLine("");\par
            \par
            Console.WriteLine("Get Book List");\par
            List<Book> l = new List<Book>();\par
            l = bU.GetBooksList();\par
            for(int j=0;j<l.Count;j++)\par
                Console.WriteLine(l[j].BookName+"--"+l[j].BookId);\par
            Console.WriteLine("");\par
            \par
            Console.WriteLine("Updated Pricing of certain book(New price,BookId");\par
            int p = int.Parse(Console.ReadLine());\par
            int id = Convert.ToInt32(Console.ReadLine());\par
            Book q = bU.UpdateBookPrice(p,id);\par
            Console.WriteLine(q.BookName+"--"+q.BookPrice);\par
            Console.WriteLine("");\par
            \par
            Console.WriteLine("Delete a book by its Id");\par
            id = Convert.ToInt32(Console.ReadLine());\par
            q = bU.DeleteBook(id);\par
            Console.WriteLine(q.BookName+" deleted!");\par
            Console.WriteLine("");        \par
            \par
        \}\par
    \}\par
\}\par
\par
\par
\b Course details into Database(Stage 2 Entity Framework)(3rd Hands on):-\b0\par
\par
Program.cs=>\par
using System;\par
using System.Collections.Generic;\par
using System.Linq;\par
using System.Text;\par
using System.Threading.Tasks;\par
\par
namespace Exercise1       //DO NOT Change the namespace name\par
\{\par
    public class Program         //DO NOT Change the class name\par
    \{\par
        static void Main(string[] args)\par
        \{\par
            Course C = new Course();\par
            CourseContext context = new CourseContext();\par
            CourseRepository cR = new CourseRepository(context);\par
            Console.WriteLine("Enter Course Id");\par
            C.CourseId = Convert.ToInt32(Console.ReadLine());\par
            Console.WriteLine("Enter Course Name");\par
            C.CourseName = Console.ReadLine();\par
            Console.WriteLine("Enter Duration");\par
            C.Duration = Convert.ToInt32(Console.ReadLine());\par
            Console.WriteLine("Enter Course Fee");\par
            C.CourseFee = double.Parse(Console.ReadLine());\par
            Console.WriteLine("Enter Instructor Name");\par
            C.InstructorName = Console.ReadLine();\par
            cR.InsertCourse(C);\par
            Console.WriteLine("");\par
            \par
            Console.WriteLine("Get Course List");\par
            List<Course> l = new List<Course>();\par
            l = cR.GetCourseList();\par
            for(int j=0;j<l.Count;j++)\par
                Console.WriteLine(l[j].CourseId+"-"+l[j].CourseName+"-"+l[j].Duration+"-"+l[j].CourseFee+"-"+l[j].InstructorName);\par
            Console.WriteLine("");\par
            \par
            Console.WriteLine("Update Course Fee");\par
            int id = Convert.ToInt32(Console.ReadLine());\par
            double p = double.Parse(Console.ReadLine());\par
            Course q = cR.UpdateCourseFee(id,p);\par
            Console.WriteLine("Updated Successfully");\par
            Console.WriteLine("");\par
            \par
            Console.WriteLine("Get Course Details By ID");\par
            int g = int.Parse(Console.ReadLine());\par
            Course b = new Course();\par
            b = cR.GetCourseByID(g);\par
            Console.WriteLine(b.CourseName+"-"+b.Duration+"-"+b.InstructorName);\par
            Console.WriteLine("");\par
        \}\par
    \}\par
\}\par
\par
//Course.cs=>\par
//THIS CLASS IS FOR REFERENCE. YOU NEED NOT CHANGE\par
using System;\par
using System.Collections.Generic;\par
using System.Linq;\par
using System.Text;\par
using System.Threading.Tasks;\par
\par
namespace Exercise1   //DO NOT Change the namespace name\par
\{\par
  public  class Course   //DO NOT Change the class name\par
    \{\par
        \par
        public int CourseId \{ get; set; \}\par
        public String CourseName \{ get; set; \}\par
        public double CourseFee \{ get; set; \}\par
        public int Duration \{ get; set; \}\par
        public String InstructorName \{ get; set; \}\par
    \}\par
\}\par
\par
//CourseRepository.cs=>\par
using System;\par
using System.Collections.Generic;\par
using System.Data.Entity;\par
using System.Linq;\par
\par
namespace Exercise1             //DO NOT Change the namespace name\par
\{\par
   public class CourseRepository      //DO NOT Change the class name\par
    \{\par
        //DO NOT Change the variable or method signature. Add only the required code inside the method.\par
        \par
        private CourseContext context = new CourseContext();\par
        public CourseRepository(CourseContext context)\par
        \{\par
            //Implement code here\par
            //context = new CourseContext();\par
            this.context = context;\par
        \}\par
        \par
        public List<Course> GetCourseList()\par
        \{\par
            //Implement code to get the book list from database\par
            //var context = new LibraryContext();\par
            var lis = context.Courses.ToList();\par
            //List<Book> b = new List<Book>();\par
            \par
            return lis;\par
\par
        \}\par
\par
        public Course GetCourseByID(int courseId)\par
        \{\par
            //Implement code here\par
            try\{\par
                var al = context.Courses.Single(a => a.CourseId== courseId);\par
                return al;\par
            \}\par
            catch(Exception e)\{\par
                return null;\par
            \}\par
\par
        \}\par
\par
        public void InsertCourse(Course course)\par
        \{\par
             //Implement code here\par
            var courses = new Course\par
            \{\par
                CourseId=course.CourseId,\par
                CourseName=course.CourseName,\par
                Duration=course.Duration,\par
                CourseFee=course.CourseFee,\par
                InstructorName=course.InstructorName\par
            \};\par
            context.Courses.Add(courses);\par
            context.SaveChanges();\par
            Console.WriteLine("Details Added Successfully");\par
\par
        \}\par
\par
        public Course UpdateCourseFee(int id, double fee)\par
        \{\par
             //Implement code here\par
            var course = context.Courses.Find(id);\par
            course.CourseFee = fee;\par
            context.SaveChanges();\par
            return course;\par
\par
        \}\par
    \}\par
\}\par
\par
//CourseContext.cs=>\par
using System;\par
using System.Collections.Generic;\par
using System.Linq;\par
using System.Text;\par
using System.Data.Entity;\par
\par
namespace Exercise1          //DO NOT Change the namespace name\par
\{\par
  public  class CourseContext:DbContext        //DO NOT Change the class name\par
    \{\par
        //DO NOT Change the Context name 'CourseConnectionString'\par
        public CourseContext() : base("name=CourseConnectionString")\{\}\par
        \par
        public virtual DbSet<Course> Courses\{get; set;\}\par
        //Declare 'Courses' of type Dbset and add neccessary declaration code.\par
        protected override void OnModelCreating(DbModelBuilder modelBuilder)\par
        \{\par
            //Implement code to make 'Book_id' required in entity 'Book' and table name as mentioned in description \par
            modelBuilder.Entity<Course>().HasKey(t => t.CourseId);\par
            modelBuilder.Entity<Course>().Property(t => t.CourseId).HasColumnName("Course_Id");\par
        \}\par
    \}\par
\}\par

\pard\sa200\sl276\slmult1\par
}
 